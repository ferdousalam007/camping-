import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  useCreateProductMutation,
  useGetCategoriesQuery,
} from "@/redux/api/baseApi";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";

const productSchema = z.object({
  name: z.string().min(1, "Name is required"),
  price: z.number().min(0, "Price must be a positive number"),
  stock: z.number().min(0, "Stock must be a non-negative number"),
  description: z.string().min(1, {
    message: "Description is required",
  }),
  category: z.string(),
  ratings: z.number().min(0).max(5).optional(),
  image: z.any({
    message: "image is required provide a file like png jpeg jpg",
  }),
  featured: z.boolean().optional(),
  recommended: z.boolean().optional(),
});

type ProductFormValues = z.infer<typeof productSchema>;

const ProductManagement = () => {
  const form = useForm<ProductFormValues>({
    resolver: zodResolver(productSchema),
  });

  const [createProduct, { isLoading, isError, error, isSuccess }] =
    useCreateProductMutation();
    console.log(isError,error,isSuccess)
  const { data: categories, isLoading: isCategoriesLoading } =
    useGetCategoriesQuery("");

  const onSubmit = async (data: ProductFormValues) => {
    console.log(data);
    const formData = new FormData();
    formData.append("name", data.name);
    formData.append("price", data.price.toString());
    formData.append("stock", data.stock.toString());
    formData.append("description", data.description);
    formData.append("category", data.category);
    if (data.ratings !== undefined) {
      formData.append("ratings", data.ratings.toString());
    }
    if (data.featured !== undefined) {
      formData.append("featured", data.featured.toString());
    }
    if (data.recommended !== undefined) {
      formData.append("recommended", data.recommended.toString());
    }
    formData.append("image", data.image[0]);

    await createProduct(formData);

    if (isSuccess) {
      form.reset();
    }
  };

  return (
    <div className="container my-5">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Name:</FormLabel>
                <FormControl>
                  <Input type="text" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="price"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Price:</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    step="0.01"
                    {...field}
                    onChange={(e) => field.onChange(parseFloat(e.target.value))}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="stock"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Stock:</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    {...field}
                    onChange={(e) => field.onChange(parseInt(e.target.value))}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Description:</FormLabel>
                <FormControl>
                  <Textarea {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="category"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Category:</FormLabel>
                <FormControl>
                  {isCategoriesLoading ? (
                    <p>Loading categories...</p>
                  ) : (
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select a category" />
                      </SelectTrigger>
                      <SelectContent>
                        {categories?.data.map(
                          (category: { _id: string; name: string }) => (
                            <SelectItem key={category._id} value={category._id}>
                              {category.name}
                            </SelectItem>
                          )
                        )}
                      </SelectContent>
                    </Select>
                  )}
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="image"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Image:</FormLabel>
                <FormControl>
                  <Input type="file" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="ratings"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Ratings:</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    step="1"
                    {...field}
                    onChange={(e) => field.onChange(parseFloat(e.target.value))}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="featured"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Featured:</FormLabel>
                <FormControl>
                  <Checkbox
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </FormControl>
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="recommended"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Recommended:</FormLabel>
                <FormControl>
                  <Checkbox
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </FormControl>
              </FormItem>
            )}
          />
          <Button type="submit" disabled={isLoading}>
            Submit
          </Button>
          {isError && <p>Error: {error?.message}</p>}
          {isSuccess && <p>Product created successfully!</p>}
        </form>
      </Form>
    </div>
  );
};

export default ProductManagement;





import SectionHeading from "@/components/SectionHeading";
import {
  useGetCategoriesQuery,
  useGetProductsQuery,
} from "@/redux/api/baseApi";
import { Product } from "@type/type";
import { useState } from "react";
import { Input } from "@/components/ui/input";

const Products = () => {
  const [search, setSearch] = useState("");
  const [category, setCategory] = useState("");
  const [minPrice, setMinPrice] = useState<number | undefined>();
  const [maxPrice, setMaxPrice] = useState<number | undefined>();
  const [sort, setSort] = useState<"asc" | "desc" | undefined>();
  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const { data: products, refetch } = useGetProductsQuery({
    search,
    category,
    minPrice,
    maxPrice,
    sort,
    page,
    limit,
  });
  const { data: categories, isLoading: isCategoriesLoading } =
    useGetCategoriesQuery("");
  const newProducts: Product[] = products?.data || [];
  console.log(newProducts);
  const handleClear = () => {
    setSearch("");
    setCategory("");
    setMinPrice(undefined);
    setMaxPrice(undefined);
    setSort(undefined);
    refetch();
    setPage(1);
  };
  const handleNextPage = () => {
    setPage((prev) => prev + 1);
    refetch();
  };

  const handlePreviousPage = () => {
    if (page > 1) {
      setPage((prev) => prev - 1);
      refetch();
    }
  };

  const handlePageChange = (pageNumber: number) => {
    setPage(pageNumber);
    refetch();
  };
  const totalPages = Math.ceil((products?.total || 0) / limit);
  return (
    <div className="container">
      <div className="py-12">
        <SectionHeading
          headingText="Products"
          paragraphText="Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusantium"
        />
      </div>
      <div>
        <Input
          type="text"
          placeholder="Search"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <select value={category} onChange={(e) => setCategory(e.target.value)}>
          <option value="">All Categories</option>
          {categories?.data.map((category: { _id: string; name: string }) => (
            <option key={category._id} value={category._id}>
              {category.name}
            </option>
          ))}
        </select>

        <input
          type="number"
          placeholder="Min Price"
          value={minPrice ?? ""}
          onChange={(e) => setMinPrice(Number(e.target.value))}
        />
        <input
          type="number"
          placeholder="Max Price"
          value={maxPrice ?? ""}
          onChange={(e) => setMaxPrice(Number(e.target.value))}
        />
        <select
          value={sort}
          onChange={(e) => setSort(e.target.value as "asc" | "desc")}
        >
          <option value="">Sort by Price</option>
          <option value="asc">Ascending</option>
          <option value="desc">Descending</option>
        </select>
        <button onClick={handleClear}>Clear</button>

        <div>
          {newProducts?.map((product: Product) => (
            <div key={product.id}>
              <h3>{product.name}</h3>
              <p>{product.description}</p>
              <p>${product.price}</p>
            </div>
          ))}
        </div>
      </div>
      <div>
        <button onClick={handlePreviousPage} disabled={page === 1}>
          Previous
        </button>
        {Array.from({ length: totalPages }, (_, index) => (
          <button
            key={index + 1}
            onClick={() => handlePageChange(index + 1)}
            disabled={page === index + 1}
          >
            {index + 1}
          </button>
        ))}
        <button
          onClick={handleNextPage}
          disabled={products && page * limit >= products.total}
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default Products;
